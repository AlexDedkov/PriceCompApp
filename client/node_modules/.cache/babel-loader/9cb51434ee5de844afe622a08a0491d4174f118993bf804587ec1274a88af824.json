{"ast":null,"code":"const handleLogin = async () => {\n  const loginData = {\n    username,\n    password,\n    isAdminLogin: true\n  }; // Add the isAdminLogin flag\n\n  try {\n    const response = await fetch('http://localhost:5000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Login failed');\n    }\n    const data = await response.json();\n    console.log('Login success:', data);\n    onLoginSuccess(username, true); // Admin login success\n  } catch (error) {\n    if (error instanceof Error) {\n      setError(error.message);\n    } else {\n      setError('Unexpected error occurred');\n    }\n  }\n};","map":{"version":3,"names":["handleLogin","loginData","username","password","isAdminLogin","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","data","console","log","onLoginSuccess","setError","message"],"sources":["D:/ITMO/Инженер Программист/Diplom/client/src/components/AdminLoginModal.tsx"],"sourcesContent":["const handleLogin = async () => {\r\n    const loginData = { username, password, isAdminLogin: true };  // Add the isAdminLogin flag\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:5000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(loginData),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Login failed');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      console.log('Login success:', data);\r\n      onLoginSuccess(username, true);  // Admin login success\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        setError(error.message);\r\n      } else {\r\n        setError('Unexpected error occurred');\r\n      }\r\n    }\r\n  };\r\n  "],"mappings":"AAAA,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMC,SAAS,GAAG;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC,CAAE;;EAE/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,SAAS;IAChC,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,cAAc,CAAC;IACpD;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;IACnCG,cAAc,CAAClB,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAE;EACnC,CAAC,CAAC,OAAOc,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYD,KAAK,EAAE;MAC1BM,QAAQ,CAACL,KAAK,CAACM,OAAO,CAAC;IACzB,CAAC,MAAM;MACLD,QAAQ,CAAC,2BAA2B,CAAC;IACvC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}